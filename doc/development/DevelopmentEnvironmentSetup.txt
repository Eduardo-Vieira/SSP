====
    Licensed to Apereo under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Apereo licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
====

How to set up your development environment:

The most up to date guide is here: https://wiki.jasig.org/display/SSP/SSP+Developer+Installation+Instructions

If that's not available...

* Download and install the latest version of Sun Java JDK 7 or install the
	Java7 package (OpenJDK is acceptable, but not preferred)

* Create Directories
	- Create a base directory for everything, or choose appropriate paths. 
		Windows: C:\ssp or C:\projects\ssp
		Unix: /usr/local/ssp or /home/user/projects/ssp

	- (Optional) Create a sub-directory to hold your binaries and tools.
	   Otherwise put them in the directory created above.
		Windows: C:\ssp\tools
		Unix: /usr/local/ssp/tools or /home/user/projects/ssp/tools
	
	- (Mandatory) Create another sub-directory to hold ssp configuration:
		Windows: C:\ssp\ssp-config
		Unix: /usr/local/ssp/ssp-config or /home/user/projects/ssp/ssp-config

	- (Optional) Create another sub-directory for the ssp src code.
	   NOTE: If you git clone, into your directory created first (../ssp), this will be created for you.
		Windows: C:\ssp\SSP
		Unix:  /usr/local/ssp/SSP or /home/user/projects/ssp/SSP

    - (Optional) Create another sub-directory for the ssp-platform src code.
       NOTE: If you git clone, into your directory created first (../ssp), this will be created for you.
            Windows: C:\ssp\SSP-Platform
            Unix:  /usr/local/ssp/SSP-Platform or /home/user/projects/ssp/SSP-Platform


* Install the following packages by running the .exe installer if on Windows or by extracting the ZIP or .tar.gz files
   to their own directories if you wish to controll the install. On Linux/OSX you can keep
   every thing in place by downloading the ZIP/.tar.gz files to the project directory created above (i.e. ../ssp).
   Remember to set environment variables as specified: https://wiki.jasig.org/display/SSP/SSP+Developer+Installation+Instructions

	- Maven (apache-maven-3.0.x+)
		Needs environment variable: M2_HOME and/or MAVEN_HOME

	- Ant (1.8.2 required)
		Needs environment variable ANT_HOME
		
	- Tomcat (apache-tomcat-6.0.x) 
        Should have TOMCAT_HOME set

    - Sencha Tools
        Should be put on path, can also have SENCHA_HOME although it won't be used.
        When finished you need to be able to run "sencha" on command line/terminal,
          SSP will use that command when building the front-end portion.

	- Create environment variables
		- Java
			Needs JAVA_HOME
		- SSP
			Needs SSP_CONFIGDIR  path to the ssp-config directory specified above

		- Update the PATH environment variable
		    Needs java, sencha, ant and maven. That is, all of those need to be able to run in a command/terminal.


* Install PostgreSQL 9.1 or newer (http://www.postgresql.org/download/) 
	- pgAdmin recommended, but not required.  You should be able to use any db client
	though this and the following step might not line up exactly.

	NOTE: SQL Server 2008r2 - 2014 is also supported, but for brevity this guide will only include instructions for
	  Postgres.


* Setup a PostgreSQL database
	- Add the sspadmin and ssp roles
		- Launch the newly installed pgAdmin application.
		- In the Object browser, navigate to and right click on
			"Server Groups->Servers->PostgreSQL 9.1 (localhost:5432)". (The last 
			item may be different depending on the settings you made during 
			installation.)
		- In the pop-up context menu, click "Connect" (enter the admin password 
			you chose when you installed PostgreSQL if prompted)
		- Right click on "Login Roles" and click "New Login Role..."
			- In the Properties tab, enter a Role name of "sspadmin" (no quotes).
			- In the Definition tab, enter a Password, and write it down for use later.
		- Perform the previous steps again, but use "ssp" instead of "sspadmin" 
			and use a different password.
		- Check that the new "sspadmin" and "ssp" roles exist in the Login Roles
			section of the Object browser.
		- Back in the Object browser right-click on "Databases" and click "New Database...".
		- Enter a Name of "ssp", Owner of "sspadmin", and click Ok.

	
* Checkout the project with git. As mentioned above git clone is the best.
		- https://github.com/Jasig/SSP
        - Note: Import project into Intellij, Eclipse, Netbeans etc. for easier navigation/editing and error checking

* Checkout SSP-Platform with git. As mentioned above git clone is the best.
        - https://github.com/Jasig/SSP-Platform


* Setup local configuration files
	- Symbolically link to, or copy (and manually watch for changes), the files
		in SSP/src/main/config/external and
		   SSP-Platform/uportal-war/src/main/resources/properties/ssp-platform-config.default.properties
		 to the directory you specified for
		 SSP_CONFIGDIR. You'll need to rename ssp-platform-config.default.properties to "ssp-platform-config.properties"
		The links/copies should be in a directory outside of the source control tree, since your local versions
		need modified appropriately for your environment and must not be committed back to the repository.
	- Modify the files you copied into SSP_CONFIGDIR
		to suit your environment.  Be sure to set the db passwords for sspadmin 
		and ssp users in the ssp-config.properties file
    - Also, edit and save build.properties.sample to build.properties in SSP-Platform directory. server.home must point
        to the TOMCAT_HOME directory.

		
* Setup CoffeeScript compilation tools (if updating legacy student-ui application called MyGPS)
	- Install node.js http://nodejs.org/#download
	- Download the closure compiler https://developers.google.com/closure/compiler/
	- Once installed, run:
		npm install -g coffee-script
	- After changes to any .coffee file
		- Manually run at the command line/prompt:
			cd scripts/coffeeScriptBuilds
			cake build
    - WARNING: This is very difficult to get to compile in modern tools and operating systems even if using all the same
         source tools. At this time it's only successfully able to be compiled using the tools above on Mac OSX.
	
* Build & Deploy
	- SSP_CONFIGDIR and the other environment variables and the database must be available
	    *before* running the commands below.

    - First, make sure the databse is running and empty and the appserver is shutdown

	- Second, build SSP (it won't deploy to the appserver yet) in the commandline run:
		mvn clean -e -U -Dmaven.test.skip=true install

    - Third, build SSP-Platform and install default uPortal tables (this will deploy SSP and SSP-Platform to the appserver)
        ant clean -Dmaven.test.skip=true initportal

        NOTE: After running this command *don't* run initportal or initdb again if the
        SSP-Platform/uPortal tables are created. You willlose login and permission customizations.
        To push SSP-Platform changes after this command, run deploy-ear.

    - Fourth, start the appserver and Liquibase will create the necessary SSP tables

* Additional, optional tasks:
	- SQL Server instead of PostgreSQL see: https://wiki.jasig.org/display/SSP/SSP+Developer+Installation+Instructions
			
	- To view/edit some of the documentation in the source /doc directory, install
		the following applications:
		- ObjectAid: http://www.objectaid.com/installation
		- FreeMind

	- Liquibase:
		- You can run liquibase from maven to advance and rollback database versions:
		mvn properties:read-project-properties liquibase:update
		mvn properties:read-project-properties liquibase:rollback -Dliquibase.rollbackCount=1
		
		-- Update, but use MSSQL (if you already have the jar installed to your maven repository)
		mvn properties:read-project-properties -P MSSQL liquibase:update
		mvn properties:read-project-properties -P MSSQL liquibase:rollback -Dliquibase.rollbackCount=1
	
	- Cobertura:
		- You can run cobertura from maven, but you will need to enable the cobertura
			maven profile in order for the spring classes to be properly proxied.
		mvn cobertura:cobertura -Dspring.profiles.active=cobertura	