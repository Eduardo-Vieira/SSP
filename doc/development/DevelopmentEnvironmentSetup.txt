How to set up your development environment:

* Download and install the latest version of Sun Java JDK 6 or install the 
	Java6 package (OpenJDK is acceptable)


* Create Directories
	- Create a base directory for everything, or choose appropriate paths. 
		Windows: C:\java
		Unix: /usr/local and /home/user/projects

	- Create a sub-directory to hold your binaries and tools.
		Windows: C:\java\bin
		Unix: /usr/local/
	
	- Create another sub-directory to hold ssp configuration:
		Windows: C:\java\etc\ssp
		Unix: /usr/local/etc/ssp

	- Create a project directory for ssp src code. 
		Windows: C:\java\projects
		Unix:  /home/user/java/projects


* Install the following packages by extracting the ZIP or .tar.gz files to their own directories.
	- Approximate walkthrough of setting up a Java development environment on 
		Linux also available at:  https://bowerstudios.com/node/720
	- Ignore the groovy sections of the steps unless you need one of the groovy 
		scripts in the scripts directory
	- If you only need to build the project (and not edit anything) feel free 
		to skip the sts sections of the steps.

	- SpringSource Tool Suite (sts-2.9.x or greater recommended) 
		- Recommended, but any editor/ide is fine.
		Windows: C:\java\bin\springsource
		Unix: /usr/local/springsource
		If you install sts, you won't need to download Maven, as sts packages a version of maven.
		
	- Maven (apache-maven-3.0.x)
		Windows: C:\java\bin\apache-maven-3.0.x
		Unix: /usr/local/apache-maven-3.0.x
		
	- Tomcat (apache-tomcat-6.0.x) 
		- app is tested here, but should run in other app containers
		Windows: C:\java\bin\apache-tomcat-6.0.x
		Unix: /usr/local/apache-tomcat-6.0.x
		
	- Groovy (groovy-1.8.x) 
		Windows: C:\java\bin\groovy-1.8.6
		Unix: /usr/local/groovy-1.8.6

	- On Unix, I recommend creating symlinks to make switching versions simpler.
		- sts
			ln -s /usr/local/springsource/sts-2.9.1.RELEASE /usr/local/sts
		- maven under sts:
			ln -s /usr/local/springsource/apache-maven-3.0.3 /usr/local/maven
		- maven separately downloaded:
			ln -s /usr/local/apache-maven-3.0.3 /usr/local/maven
		- tomcat
			ln -s /usr/local/apache-tomcat-6.0.35 /usr/local/tomcat
		- groovy
			ln -s /usr/local/groovy-1.8.6 /usr/local/groovy

	- Create environment variables
		- Java
			Windows: JAVA_HOME=C:\Program Files\Java\jdk1.6.0_31
			Unix (64 bit Ubuntu): JAVA_HOME=/usr/lib/jvm/java-6-openjdk-amd64
		- Groovy
			Windows: GROOVY_HOME=C:\java\bin\groovy-1.8.6 
			Unix:  GROOVY_HOME=/usr/local/groovy
		- Maven
			Windows: MAVEN_HOME=C:\java\bin\apache-maven-3.0.3
			Unix:  MAVEN_HOME=/usr/local/maven
		- SSP
			- SSP_CONFIGDIR can be set system wide here - or via the deployed 
				context.xml (as specified later in this document)
			- SSP_TESTCONFIGDIR allows 2 installations of SSP to exist on the 
				same box, one to be used for unit testing purposes, the other to 
				deploy the app in tomcat.  It is fine to set them to be the 
				same location.
			Windows:
				SSP_CONFIGDIR=C:\java\etc\ssp
				SSP_TESTCONFIGDIR=C:\java\etc\ssp
			Unix:
				SSP_CONFIGDIR=/usr/local/etc/ssp
				SSP_TESTCONFIGDIR=/usr/local/etc/ssp
				
		- Update the PATH environment variable by appending the following items
			Windows:
				- (A tool called RapidEE can make this less painful in windows environments):
				PATH=%JAVA_HOME%\bin;%MAVEN_HOME%\bin;%GROOVY_HOME%\bin
			Unix:
				PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$GROOVY_HOME/bin 


* Install PostgreSQL 9.1 or newer (http://www.postgresql.org/download/) 
	- pgAdmin recommended, but not required.  You should be able to use any db client
	though this and the following step might not line up exactly.


* Setup a PostgreSQL database
	- Add the sspadmin and ssp roles
		- Launch the newly installed pgAdmin application.
		- In the Object browser, navigate to and right click on
			"Server Groups->Servers->PostgreSQL 9.1 (localhost:5432)". (The last 
			item may be different depending on the settings you made during 
			installation.)
		- In the pop-up context menu, click "Connect" (enter the admin password 
			you chose when you installed PostgreSQL if prompted)
		- Right click on "Login Roles" and click "New Login Role..."
			- In the Properties tab, enter a Role name of "sspadmin" (no quotes).
			- In the Definition tab, enter a Password, and write it down for use later.
		- Perform the previous steps again, but use "ssp" instead of "sspadmin" 
			and use a different password.
		- Check that the new "sspadmin" and "ssp" roles exist in the Login Roles
			section of the Object browser.
		- Back in the Object browser right-click on "Databases" and click "New Database...".
		- Enter a Name of "ssp", Owner of "sspadmin", and click Ok.

	
* Setup SpringSource Tool Suite:
	- Launch sts.exe from your SpringSource Tool Suite directory.
		Windows: C:\java\bin\sts-2.9.0.RELEASE\STS.exe
		Unix: /usr/local/springsource/sts/STS
	- Install required extensions:
		- Once the sts launches, from the Dashboard view click the Extensions 
			tab at the bottom of the Dashboard view. If it is not showing already, 
			the Dashboard may be accessed via Help->Dashboard) 
		- Install the Groovy Eclipse extension:
			- necessary for viewing/writing tests in src/groovy


* Checkout the project with git.
		- https://github.com/russlittle/SSP-Open-Source-Project
	- Import project into Eclipse


* Setup local configuration files
	- Symbolically link to, or copy (and manually watch for changes), the files
		in /src/main/config/external to the directory you specified for 
		SSP_TESTCONFIGDIR and SSP_CONFIGDIR.  The links/copies should be in a 
		directory outside of the source control tree, since your local versions 
		need modified appropriately for your environment and must not be 
		committed back to the repository.
	- Modify the files you copied into SSP_TESTCONFIGDIR and SSP_CONFIGDIR 
		to suit your environment.  Be sure to set the db passwords for sspadmin 
		and ssp users in the ssp-config.properties file
	- If you have set your config directory to something other than 
	/usr/local/etc/ssp and do not wish to set the SSP_CONFIGDIR environment 
	variable, then you can add that path to the Tomcat context.xml.
		Example Windows version:
			<Parameter name="SSP_CONFIGDIR" value="C:\\ssp" override="false" />
		OR
		Copy the ssp/src/main/webapp/META-INF/context.xml file to your
		Tomcat directory at
			[your Tomcat (Catalina) directory]/conf/[enginename]/[hostname]/
		Replace the items in brackets as appropriate for your environment.
		
* Setup CoffeeScript compilation tools (if updating legacy student-ui application)
	- Install node.js http://nodejs.org/#download
	- Download the closure compiler https://developers.google.com/closure/compiler/
	- Once installed, run:
		npm install -g coffee-script
	- After changes to any .coffee file
		- Manually run at the command line/prompt:
			cd scripts/coffeeScriptBuilds
			cake build
	
* Build & Deploy
	- SSP can be run in one of 3 modes - dev-standalone, standalone, and uPortal
		- dev-standalone
			- completely free of uPortal - useful for development work only.
		- standalone
			- as the only portlet in a uPortal instance
		- uPortal
			- as one of many portlets in a uPortal instance
	
	- To run ssp in dev-standalone mode:
		- set the spring.profiles.active conf value in the config file : 
			spring.profiles.active=dev-standalone
		-set the SSP_CONFIGDIR as an environment variable...  context.xml will not be sufficient.
		
		- Use sts to deploy the application to an embedded tomcat:
			- Confirm that in the Package Explorer (Window->Show View->Package Explorer)
				lists "Apache Tomcat v6.0" or similar in "Servers". If not, add it
				pointing to your Tomcat installation directory.
			- use the sts server pane to start / debug / stop the application
		OR
		- Deploy straight to an app server.
		
	- Building should be fairly straightforward, at the command line, run: 
		mvn package

* Additional, optional tasks:
	- SQL Server instead of PostgreSQL (not complete yet)
		- Follow the instructions located in the source code 
			/externalLibs/msSQL-JDBC_toMaven.sh script file.
			Open that script file in a text editor to read the instructions.
			
	- To view/edit some of the documentation in the source /doc directory, install
		the following applications:
		- ObjectAid: http://www.objectaid.com/installation
		- FreeMind
		
	- To run the FindBug reports locally before the build server runs them, install
		the FindBug plugin via the "Install New Software" tool in Eclipse:
		- FindBugs: http://findbugs.cs.umd.edu/eclipse/

	- Liquibase:
		- You can run liquibase from maven to advance and rollback database versions:
		mvn properties:read-project-properties liquibase:update
		mvn properties:read-project-properties liquibase:rollback -Dliquibase.rollbackCount=1
	
	- Cobertura:
		- You can run cobertura from maven, but you will need to enable the cobertura
			maven profile in order for the spring classes to be properly proxied.
		mvn cobertura:cobertura -Dspring.profiles.active=cobertura	