<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Apereo under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Apereo licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <property name="nvarchar.type" value="character varying" dbms="postgresql" />
    <property name="nvarchar.type" value="nvarchar" dbms="mssql" />

    <!-- The person table and trigger is special because there are 3 cases:
          1. Insert new person/user/student into person table where school_id does not exist in external_person
          2. Insert new person/user/student into person where school_id exists in external_person
          3. Update an existing person record -->

    <!-- Changes: On UPDATE utilizing the OLD.school_id value to make sure mv_directory_person is updated.
          Of course that's not available when adding a person from external so a conditional is used to set the
           oldSchoolId value. Otherwise, subquery was not working leaving no update performed in many scenarios.
          Added the insert since in this table it will be heavily used by schools that don't load from
            SIS. Not worried about collisions since can't have duplicate school_ids. -->
    <changeSet dbms="postgresql" id="fix update_directory_person_school_id on person trigger psql" author="paul.spaude">
        <sql splitStatements="false"><![CDATA[
            CREATE OR REPLACE FUNCTION ${schema}.update_directory_person_from_view_where_school_id()
            RETURNS TRIGGER AS $$
            DECLARE oldSchoolId varchar(50);
            BEGIN
        		IF (TG_OP = 'INSERT') THEN
		            oldSchoolId = NEW.school_id;
		        ELSE
		            oldSchoolId = OLD.school_id;
		        END IF;

                IF (TG_OP = 'UPDATE') OR EXISTS (SELECT 1 FROM public.mv_directory_person WHERE school_id = NEW.school_id) THEN
                    UPDATE public.mv_directory_person SET
                        id =                        subquery.id,
                        person_id =                 subquery.person_id,
                        object_status =             subquery.object_status,
                        school_id =                 subquery.school_id,
                        username =                  subquery.username,
                        first_name =                subquery.first_name,
                        middle_name =               subquery.middle_name,
                        last_name =                 subquery.last_name,
                        birth_date =                subquery.birth_date,
                        primary_email_address =     subquery.primary_email_address,
                        secondary_email_address =   subquery.secondary_email_address,
                        address_line_1 =            subquery.address_line_1,
                        address_line_2 =            subquery.address_line_2,
                        city =                      subquery.city,
                        state =                     subquery.state,
                        zip_code =                  subquery.zip_code,
                        home_phone =                subquery.home_phone,
                        work_phone =                subquery.work_phone,
                        actual_start_term =         subquery.actual_start_term,
                        actual_start_year =         subquery.actual_start_year,
                        cell_phone =                subquery.cell_phone,
                        photo_url =                 subquery.photo_url,
                        residency_county =          subquery.residency_county,
                        f1_status =                 subquery.f1_status,
                        coach_id =                  subquery.coach_id,
                        coach_school_id =           subquery.coach_school_id,
                        coach_first_name =          subquery.coach_first_name,
                        coach_last_name =           subquery.coach_last_name,
                        student_type_name =         subquery.student_type_name,
                        student_intake_complete_date = subquery.student_intake_complete_date,
                        program_status_name =       subquery.program_status_name,
                        credit_hours_earned =       subquery.credit_hours_earned,
                        sap_status_code =           subquery.sap_status_code,
                        grade_point_average =       subquery.grade_point_average,
                        local_gpa =                 subquery.local_gpa,
                        program_gpa =               subquery.program_gpa,
                        active_alerts_count =       subquery.active_alerts_count,
                        closed_alerts_count =       subquery.closed_alerts_count,
                        early_alert_response_due_count = subquery.early_alert_response_due_count,
                        early_alert_response_current_count = subquery.early_alert_response_current_count,
                        current_registration_status = subquery.current_registration_status,
                        campus_name =               subquery.campus_name,
                        next_term_registration_status = subquery.next_term_registration_status
                    FROM (
                        SELECT
                            vpd.id,
                            vpd.person_id,
                            vpd.object_status,
                            vpd.school_id,
                            vpd.username,
                            vpd.first_name,
                            vpd.middle_name,
                            vpd.last_name,
                            vpd.birth_date,
                            vpd.primary_email_address,
                            vpd.secondary_email_address,
                            vpd.address_line_1,
                            vpd.address_line_2,
                            vpd.city,
                            vpd.state,
                            vpd.zip_code,
                            vpd.home_phone,
                            vpd.work_phone,
                            vpd.actual_start_term,
                            vpd.actual_start_year,
                            vpd.cell_phone,
                            vpd.photo_url,
                            vpd.residency_county,
                            vpd.f1_status,
                            vpd.coach_id,
                            vpd.coach_school_id,
                            vpd.coach_first_name,
                            vpd.coach_last_name,
                            vpd.student_type_name,
                            vpd.student_intake_complete_date,
                            vpd.program_status_name,
                            vpd.credit_hours_earned,
                            vpd.sap_status_code,
                            vpd.grade_point_average,
                            vpd.local_gpa,
                            vpd.program_gpa,
                            vpd.active_alerts_count,
                            vpd.closed_alerts_count,
                            vpd.early_alert_response_due_count,
                            vpd.early_alert_response_current_count,
                            vpd.current_registration_status,
                            vpd.campus_name,
                            vpd.next_term_registration_status
                        FROM  public.v_directory_person AS vpd WHERE vpd.id=NEW.school_id) AS subquery
                        WHERE public.mv_directory_person.id=oldSchoolId;
                ELSIF NOT EXISTS (SELECT 1 FROM public.mv_directory_person WHERE school_id = NEW.school_id) THEN
                    INSERT INTO public.mv_directory_person(
                        id,
                        person_id,
                        object_status,
                        school_id,
                        username,
                        first_name,
                        middle_name,
                        last_name,
                        birth_date,
                        primary_email_address,
                        secondary_email_address,
                        address_line_1,
                        address_line_2,
                        city,
                        state,
                        zip_code,
                        home_phone,
                        work_phone,
                        actual_start_term,
                        actual_start_year,
                        cell_phone,
                        photo_url,
                        residency_county,
                        f1_status,
                        coach_id,
                        coach_school_id,
                        coach_first_name,
                        coach_last_name,
                        student_type_name,
                        student_intake_complete_date,
                        program_status_name,
                        credit_hours_earned,
                        sap_status_code,
                        grade_point_average,
                        local_gpa,
                        program_gpa,
                        active_alerts_count,
                        closed_alerts_count,
                        early_alert_response_due_count,
                        early_alert_response_current_count,
                        current_registration_status,
                        campus_name,
                        next_term_registration_status
                    ) (SELECT
                        vpd.id,
                        vpd.person_id,
                        vpd.object_status,
                        vpd.school_id,
                        vpd.username,
                        vpd.first_name,
                        vpd.middle_name,
                        vpd.last_name,
                        vpd.birth_date,
                        vpd.primary_email_address,
                        vpd.secondary_email_address,
                        vpd.address_line_1,
                        vpd.address_line_2,
                        vpd.city,
                        vpd.state,
                        vpd.zip_code,
                        vpd.home_phone,
                        vpd.work_phone,
                        vpd.actual_start_term,
                        vpd.actual_start_year,
                        vpd.cell_phone,
                        vpd.photo_url,
                        vpd.residency_county,
                        vpd.f1_status,
                        vpd.coach_id,
                        vpd.coach_school_id,
                        vpd.coach_first_name,
                        vpd.coach_last_name,
                        vpd.student_type_name,
                        vpd.student_intake_complete_date,
                        vpd.program_status_name,
                        vpd.credit_hours_earned,
                        vpd.sap_status_code,
                        vpd.grade_point_average,
                        vpd.local_gpa,
                        vpd.program_gpa,
                        vpd.active_alerts_count,
                        vpd.closed_alerts_count,
                        vpd.early_alert_response_due_count,
                        vpd.early_alert_response_current_count,
                        vpd.current_registration_status,
                        vpd.campus_name,
                        vpd.next_term_registration_status
                    FROM  public.v_directory_person AS vpd WHERE vpd.id=NEW.school_id);
                END IF;
                RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        ]]></sql>
    </changeSet>

    <!-- Changes: On UPDATE utilizing the NEW.person_id value instead of subquery since that didn't work.
          However, this is called by early_alert, and the Person should always exist which is enforced by constraints.
          Both UPDATE and INSERT trigger ops need to perform the same UPDATE command. The INSERT was added
          from the person table trigger in case it's somehow utilized. The conditional was subsequently changed to
          rely on the person_id existing in mv_directory_person table. -->
    <changeSet dbms="postgresql" id="fix update_directory_person_person_id on ea trigger psql" author="paul.spaude">
        <sql splitStatements="false"><![CDATA[
            CREATE OR REPLACE FUNCTION ${schema}.update_directory_person_from_view_where_person_id()
            RETURNS TRIGGER AS $$
            BEGIN
		        IF EXISTS (SELECT 1 FROM public.mv_directory_person WHERE person_id = NEW.person_id) THEN
                    UPDATE ${schema}.mv_directory_person SET
                        id =                        subquery.id,
                        object_status =             subquery.object_status,
                        person_id =                 subquery.person_id,
                        school_id =                 subquery.school_id,
                        username =                  subquery.username,
                        first_name =                subquery.first_name,
                        middle_name =               subquery.middle_name,
                        last_name =                 subquery.last_name,
                        birth_date =                subquery.birth_date,
                        primary_email_address =     subquery.primary_email_address,
                        secondary_email_address =   subquery.secondary_email_address,
                        address_line_1 =            subquery.address_line_1,
                        address_line_2 =            subquery.address_line_2,
                        city =                      subquery.city,
                        state =                     subquery.state,
                        zip_code =                  subquery.zip_code,
                        home_phone =                subquery.home_phone,
                        work_phone =                subquery.work_phone,
                        actual_start_term =         subquery.actual_start_term,
                        actual_start_year =         subquery.actual_start_year,
                        cell_phone =                subquery.cell_phone,
                        photo_url =                 subquery.photo_url,
                        residency_county =          subquery.residency_county,
                        f1_status =                 subquery.f1_status,
                        coach_id =                  subquery.coach_id,
                        coach_school_id =           subquery.coach_school_id,
                        coach_first_name =          subquery.coach_first_name,
                        coach_last_name =           subquery.coach_last_name,
                        student_type_name =         subquery.student_type_name,
                        student_intake_complete_date = subquery.student_intake_complete_date,
                        program_status_name =       subquery.program_status_name,
                        credit_hours_earned =       subquery.credit_hours_earned,
                        sap_status_code =           subquery.sap_status_code,
                        grade_point_average =       subquery.grade_point_average,
                        local_gpa =                 subquery.local_gpa,
                        program_gpa =               subquery.program_gpa,
                        active_alerts_count =       subquery.active_alerts_count,
                        closed_alerts_count =       subquery.closed_alerts_count,
                        early_alert_response_due_count = subquery.early_alert_response_due_count,
                        early_alert_response_current_count = subquery.early_alert_response_current_count,
                        current_registration_status = subquery.current_registration_status,
                        campus_name =               subquery.campus_name,
                        next_term_registration_status = subquery.next_term_registration_status
                    FROM (SELECT
                        vpd.id,
                        vpd.person_id,
                        vpd.object_status,
                        vpd.school_id,
                        vpd.username,
                        vpd.first_name,
                        vpd.middle_name,
                        vpd.last_name,
                        vpd.birth_date,
                        vpd.primary_email_address,
                        vpd.secondary_email_address,
                        vpd.address_line_1,
                        vpd.address_line_2,
                        vpd.city,
                        vpd.state,
                        vpd.zip_code,
                        vpd.home_phone,
                        vpd.work_phone,
                        vpd.actual_start_term,
                        vpd.actual_start_year,
                        vpd.cell_phone,
                        vpd.photo_url,
                        vpd.residency_county,
                        vpd.f1_status,
                        vpd.coach_id,
                        vpd.coach_school_id,
                        vpd.coach_first_name,
                        vpd.coach_last_name,
                        vpd.student_type_name,
                        vpd.student_intake_complete_date,
                        vpd.program_status_name,
                        vpd.credit_hours_earned,
                        vpd.sap_status_code,
                        vpd.grade_point_average,
                        vpd.local_gpa,
                        vpd.program_gpa,
                        vpd.active_alerts_count,
                        vpd.closed_alerts_count,
                        vpd.early_alert_response_due_count,
                        vpd.early_alert_response_current_count,
                        vpd.current_registration_status,
                        vpd.campus_name,
                        vpd.next_term_registration_status
                    FROM  ${schema}.v_directory_person AS vpd WHERE vpd.person_id=NEW.person_id) AS subquery
                    WHERE ${schema}.mv_directory_person.person_id=NEW.person_id;
                ELSIF NOT EXISTS (SELECT 1 FROM public.mv_directory_person WHERE person_id = NEW.person_id) THEN
                    INSERT INTO public.mv_directory_person(
                        id,
                        person_id,
                        object_status,
                        school_id,
                        username,
                        first_name,
                        middle_name,
                        last_name,
                        birth_date,
                        primary_email_address,
                        secondary_email_address,
                        address_line_1,
                        address_line_2,
                        city,
                        state,
                        zip_code,
                        home_phone,
                        work_phone,
                        actual_start_term,
                        actual_start_year,
                        cell_phone,
                        photo_url,
                        residency_county,
                        f1_status,
                        coach_id,
                        coach_school_id,
                        coach_first_name,
                        coach_last_name,
                        student_type_name,
                        student_intake_complete_date,
                        program_status_name,
                        credit_hours_earned,
                        sap_status_code,
                        grade_point_average,
                        local_gpa,
                        program_gpa,
                        active_alerts_count,
                        closed_alerts_count,
                        early_alert_response_due_count,
                        early_alert_response_current_count,
                        current_registration_status,
                        campus_name,
                        next_term_registration_status
                    ) (SELECT
                        vpd.id,
                        vpd.person_id,
                        vpd.object_status,
                        vpd.school_id,
                        vpd.username,
                        vpd.first_name,
                        vpd.middle_name,
                        vpd.last_name,
                        vpd.birth_date,
                        vpd.primary_email_address,
                        vpd.secondary_email_address,
                        vpd.address_line_1,
                        vpd.address_line_2,
                        vpd.city,
                        vpd.state,
                        vpd.zip_code,
                        vpd.home_phone,
                        vpd.work_phone,
                        vpd.actual_start_term,
                        vpd.actual_start_year,
                        vpd.cell_phone,
                        vpd.photo_url,
                        vpd.residency_county,
                        vpd.f1_status,
                        vpd.coach_id,
                        vpd.coach_school_id,
                        vpd.coach_first_name,
                        vpd.coach_last_name,
                        vpd.student_type_name,
                        vpd.student_intake_complete_date,
                        vpd.program_status_name,
                        vpd.credit_hours_earned,
                        vpd.sap_status_code,
                        vpd.grade_point_average,
                        vpd.local_gpa,
                        vpd.program_gpa,
                        vpd.active_alerts_count,
                        vpd.closed_alerts_count,
                        vpd.early_alert_response_due_count,
                        vpd.early_alert_response_current_count,
                        vpd.current_registration_status,
                        vpd.campus_name,
                        vpd.next_term_registration_status
                    FROM  public.v_directory_person AS vpd WHERE vpd.person_id=NEW.person_id);
                END IF;
                RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        ]]></sql>
    </changeSet>

    <!-- Changes: On UPDATE utilizing the NEW.person_id value instead of subquery since that didn't work.
      This is called by early_alert_response and the Person (and EA) should always exist which is enforced
      by constraints. Both UPDATE and INSERT trigger ops need to perform the same UPDATE command. The INSERT was added
      from the Early Alert table trigger in case it's somehow utilized. The conditional was subsequently changed to
      rely on the person_id existing in mv_directory_person table stored by a variable. -->
    <changeSet dbms="postgresql" id="fix update_directory_person_ea_id on ea_response trigger psql" author="paul.spaude">
        <sql splitStatements="false" ><![CDATA[
        CREATE OR REPLACE FUNCTION ${schema}.update_directory_person_from_view_where_early_alert_id()
            RETURNS TRIGGER AS $$
            DECLARE new_person_id uuid;
            BEGIN
                new_person_id = (SELECT ea.person_id FROM early_alert ea WHERE ea.id = NEW.early_alert_id);
		        IF EXISTS (SELECT 1 FROM public.mv_directory_person WHERE person_id = new_person_id) THEN
                    UPDATE ${schema}.mv_directory_person SET
                    id =                        subquery.id,
                    object_status =             subquery.object_status,
                    person_id =                 subquery.person_id,
                    school_id =                 subquery.school_id,
                    username =                  subquery.username,
                    first_name =                subquery.first_name,
                    middle_name =               subquery.middle_name,
                    last_name =                 subquery.last_name,
                    birth_date =                subquery.birth_date,
                    primary_email_address =     subquery.primary_email_address,
                    secondary_email_address =   subquery.secondary_email_address,
                    address_line_1 =            subquery.address_line_1,
                    address_line_2 =            subquery.address_line_2,
                    city =                      subquery.city,
                    state =                     subquery.state,
                    zip_code =                  subquery.zip_code,
                    home_phone =                subquery.home_phone,
                    work_phone =                subquery.work_phone,
                    actual_start_term =         subquery.actual_start_term,
                    actual_start_year =         subquery.actual_start_year,
                    cell_phone =                subquery.cell_phone,
                    photo_url =                 subquery.photo_url,
                    residency_county =          subquery.residency_county,
                    f1_status =                 subquery.f1_status,
                    coach_id =                  subquery.coach_id,
                    coach_school_id =           subquery.coach_school_id,
                    coach_first_name =          subquery.coach_first_name,
                    coach_last_name =           subquery.coach_last_name,
                    student_type_name =         subquery.student_type_name,
                    student_intake_complete_date = subquery.student_intake_complete_date,
                    program_status_name =       subquery.program_status_name,
                    credit_hours_earned =       subquery.credit_hours_earned,
                    sap_status_code =           subquery.sap_status_code,
                    grade_point_average =       subquery.grade_point_average,
                    local_gpa =                 subquery.local_gpa,
                    program_gpa =               subquery.program_gpa,
                    active_alerts_count =       subquery.active_alerts_count,
                    closed_alerts_count =       subquery.closed_alerts_count,
                    early_alert_response_due_count = subquery.early_alert_response_due_count,
                    early_alert_response_current_count = subquery.early_alert_response_current_count,
                    current_registration_status = subquery.current_registration_status,
                    campus_name =               subquery.campus_name,
                    next_term_registration_status = subquery.next_term_registration_status
                    FROM (SELECT
                        vpd.id,
                        vpd.object_status,
                        vpd.person_id,
                        vpd.school_id,
                        vpd.username,
                        vpd.first_name,
                        vpd.middle_name,
                        vpd.last_name,
                        vpd.birth_date,
                        vpd.primary_email_address,
                        vpd.secondary_email_address,
                        vpd.address_line_1,
                        vpd.address_line_2,
                        vpd.city,
                        vpd.state,
                        vpd.zip_code,
                        vpd.home_phone,
                        vpd.work_phone,
                        vpd.actual_start_term,
                        vpd.actual_start_year,
                        vpd.cell_phone,
                        vpd.photo_url,
                        vpd.residency_county,
                        vpd.f1_status,
                        vpd.coach_id,
                        vpd.coach_school_id,
                        vpd.coach_first_name,
                        vpd.coach_last_name,
                        vpd.student_type_name,
                        vpd.student_intake_complete_date,
                        vpd.program_status_name,
                        vpd.credit_hours_earned,
                        vpd.sap_status_code,
                        vpd.grade_point_average,
                        vpd.local_gpa,
                        vpd.program_gpa,
                        vpd.active_alerts_count,
                        vpd.closed_alerts_count,
                        vpd.early_alert_response_due_count,
                        vpd.early_alert_response_current_count,
                        vpd.current_registration_status,
                        vpd.campus_name,
                        vpd.next_term_registration_status
                    FROM  ${schema}.v_directory_person AS vpd
                        WHERE vpd.person_id=new_person_id) AS subquery
                    WHERE ${schema}.mv_directory_person.person_id=new_person_id;
                ELSIF NOT EXISTS (SELECT 1 FROM public.mv_directory_person WHERE person_id = new_person_id) THEN
                    INSERT INTO public.mv_directory_person(
                        id,
                        person_id,
                        object_status,
                        school_id,
                        username,
                        first_name,
                        middle_name,
                        last_name,
                        birth_date,
                        primary_email_address,
                        secondary_email_address,
                        address_line_1,
                        address_line_2,
                        city,
                        state,
                        zip_code,
                        home_phone,
                        work_phone,
                        actual_start_term,
                        actual_start_year,
                        cell_phone,
                        photo_url,
                        residency_county,
                        f1_status,
                        coach_id,
                        coach_school_id,
                        coach_first_name,
                        coach_last_name,
                        student_type_name,
                        student_intake_complete_date,
                        program_status_name,
                        credit_hours_earned,
                        sap_status_code,
                        grade_point_average,
                        local_gpa,
                        program_gpa,
                        active_alerts_count,
                        closed_alerts_count,
                        early_alert_response_due_count,
                        early_alert_response_current_count,
                        current_registration_status,
                        campus_name,
                        next_term_registration_status
                    ) (SELECT
                        vpd.id,
                        vpd.person_id,
                        vpd.object_status,
                        vpd.school_id,
                        vpd.username,
                        vpd.first_name,
                        vpd.middle_name,
                        vpd.last_name,
                        vpd.birth_date,
                        vpd.primary_email_address,
                        vpd.secondary_email_address,
                        vpd.address_line_1,
                        vpd.address_line_2,
                        vpd.city,
                        vpd.state,
                        vpd.zip_code,
                        vpd.home_phone,
                        vpd.work_phone,
                        vpd.actual_start_term,
                        vpd.actual_start_year,
                        vpd.cell_phone,
                        vpd.photo_url,
                        vpd.residency_county,
                        vpd.f1_status,
                        vpd.coach_id,
                        vpd.coach_school_id,
                        vpd.coach_first_name,
                        vpd.coach_last_name,
                        vpd.student_type_name,
                        vpd.student_intake_complete_date,
                        vpd.program_status_name,
                        vpd.credit_hours_earned,
                        vpd.sap_status_code,
                        vpd.grade_point_average,
                        vpd.local_gpa,
                        vpd.program_gpa,
                        vpd.active_alerts_count,
                        vpd.closed_alerts_count,
                        vpd.early_alert_response_due_count,
                        vpd.early_alert_response_current_count,
                        vpd.current_registration_status,
                        vpd.campus_name,
                        vpd.next_term_registration_status
                    FROM  public.v_directory_person AS vpd WHERE vpd.person_id=new_person_id);
                END IF;
                RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        ]]></sql>
    </changeSet>

    <!-- Dropping existing mssql trigger will re-add below. Intentionally leaving other triggers alone
           because we know they work and to reduce the chances of MERGE causing unnecessary complications.
            In the future if problems are noted, we'll need to alter the other two MSSQL triggers. -->
    <changeSet dbms="mssql" id="drop triggers directory_person mssql" author="paul.spaude">
        <sql splitStatements="false"><![CDATA[
                DROP TRIGGER ${schema}.tr_insert_directory_person_person;;
        ]]></sql>
    </changeSet>

    <!-- Changes: Using a Merge to handle the 3 cases on person table listed at the top of this file.
           Merge brings it's own complications, but it's more performant than the previous cursor and
             there was no easy way to handle passing two or more values while switching on the 3 conditional cases
             with multiple records affected by a single statement. -->
    <changeSet dbms="mssql" id="add person directory on person trigger mssql" author="paul.spaude">
        <sql splitStatements="false"><![CDATA[
            CREATE TRIGGER ${schema}.tr_insert_directory_person_person on ${schema}.person FOR INSERT, UPDATE AS
                IF ${schema}.DIRECTORY_PERSON_REFRESH_RUNNING() = 0
                BEGIN
					MERGE INTO ${schema}.mv_directory_person AS TARGET
					USING
						(SELECT
							vdp.*
						FROM ${schema}.v_directory_person vdp
						INNER JOIN inserted i ON vdp.id = i.school_id
						) AS SOURCE
						ON TARGET.id = SOURCE.id
					WHEN MATCHED THEN
						UPDATE SET
							TARGET.id =                        SOURCE.id,
							TARGET.object_status =             SOURCE.object_status,
							TARGET.person_id =                 SOURCE.person_id,
							TARGET.school_id =                 SOURCE.school_id,
							TARGET.username =                  SOURCE.username,
							TARGET.first_name =                SOURCE.first_name,
							TARGET.middle_name =               SOURCE.middle_name,
							TARGET.last_name =                 SOURCE.last_name,
							TARGET.birth_date =                SOURCE.birth_date,
							TARGET.primary_email_address =     SOURCE.primary_email_address,
							TARGET.secondary_email_address =   SOURCE.secondary_email_address,
							TARGET.address_line_1 =            SOURCE.address_line_1,
							TARGET.address_line_2 =            SOURCE.address_line_2,
							TARGET.city =                      SOURCE.city,
							TARGET.state =                     SOURCE.state,
							TARGET.zip_code =                  SOURCE.zip_code,
							TARGET.home_phone =                SOURCE.home_phone,
							TARGET.work_phone =                SOURCE.work_phone,
							TARGET.actual_start_term =         SOURCE.actual_start_term,
							TARGET.actual_start_year =         SOURCE.actual_start_year,
							TARGET.cell_phone =                SOURCE.cell_phone,
							TARGET.photo_url =                 SOURCE.photo_url,
							TARGET.residency_county =          SOURCE.residency_county,
							TARGET.f1_status =                 SOURCE.f1_status,
							TARGET.coach_id =                  SOURCE.coach_id,
							TARGET.coach_school_id =           SOURCE.coach_school_id,
							TARGET.coach_first_name =          SOURCE.coach_first_name,
							TARGET.coach_last_name =           SOURCE.coach_last_name,
							TARGET.student_type_name =         SOURCE.student_type_name,
							TARGET.student_intake_complete_date = SOURCE.student_intake_complete_date,
							TARGET.program_status_name =       SOURCE.program_status_name,
							TARGET.credit_hours_earned =       SOURCE.credit_hours_earned,
							TARGET.sap_status_code =           SOURCE.sap_status_code,
							TARGET.grade_point_average =       SOURCE.grade_point_average,
							TARGET.local_gpa =                 SOURCE.local_gpa,
							TARGET.program_gpa =               SOURCE.program_gpa,
							TARGET.active_alerts_count =       SOURCE.active_alerts_count,
							TARGET.closed_alerts_count =       SOURCE.closed_alerts_count,
							TARGET.early_alert_response_due_count = SOURCE.early_alert_response_due_count,
							TARGET.early_alert_response_current_count = SOURCE.early_alert_response_current_count,
							TARGET.current_registration_status = SOURCE.current_registration_status,
							TARGET.campus_name =               SOURCE.campus_name,
							TARGET.next_term_registration_status = SOURCE.next_term_registration_status
					WHEN NOT MATCHED BY TARGET THEN
						INSERT (
							id,
							person_id,
							object_status,
							school_id,
							username,
							first_name,
							middle_name,
							last_name,
							birth_date,
							primary_email_address,
							secondary_email_address,
							address_line_1,
							address_line_2,
							city,
							state,
							zip_code,
							home_phone,
							work_phone,
							actual_start_term,
							actual_start_year,
							cell_phone,
							photo_url,
							residency_county,
							f1_status,
							coach_id,
							coach_school_id,
							coach_first_name,
							coach_last_name,
							student_type_name,
							student_intake_complete_date,
							program_status_name,
							credit_hours_earned,
							sap_status_code,
							grade_point_average,
							local_gpa,
							program_gpa,
							active_alerts_count,
							closed_alerts_count,
							early_alert_response_due_count,
							early_alert_response_current_count,
							current_registration_status,
							campus_name,
							next_term_registration_status
						) VALUES (
							SOURCE.id,
							SOURCE.person_id,
							SOURCE.object_status,
							SOURCE.school_id,
							SOURCE.username,
							SOURCE.first_name,
							SOURCE.middle_name,
							SOURCE.last_name,
							SOURCE.birth_date,
							SOURCE.primary_email_address,
							SOURCE.secondary_email_address,
							SOURCE.address_line_1,
							SOURCE.address_line_2,
							SOURCE.city,
							SOURCE.state,
							SOURCE.zip_code,
							SOURCE.home_phone,
							SOURCE.work_phone,
							SOURCE.actual_start_term,
							SOURCE.actual_start_year,
							SOURCE.cell_phone,
							SOURCE.photo_url,
							SOURCE.residency_county,
							SOURCE.f1_status,
							SOURCE.coach_id,
							SOURCE.coach_school_id,
							SOURCE.coach_first_name,
							SOURCE.coach_last_name,
							SOURCE.student_type_name,
							SOURCE.student_intake_complete_date,
							SOURCE.program_status_name,
							SOURCE.credit_hours_earned,
							SOURCE.sap_status_code,
							SOURCE.grade_point_average,
							SOURCE.local_gpa,
							SOURCE.program_gpa,
							SOURCE.active_alerts_count,
							SOURCE.closed_alerts_count,
							SOURCE.early_alert_response_due_count,
							SOURCE.early_alert_response_current_count,
							SOURCE.current_registration_status,
							SOURCE.campus_name,
							SOURCE.next_term_registration_status);
                END;
        ]]></sql>
    </changeSet>
</databaseChangeLog>