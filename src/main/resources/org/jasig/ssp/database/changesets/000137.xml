<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a
    copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the
    specific language governing permissions and limitations
    under the License.

-->

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog 
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext 
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <property name="schema" value="${database.schema}" />
    <property name="nvarchar.type" value="character varying" dbms="postgresql" />
    <property name="nvarchar.type" value="nvarchar" dbms="mssql" />
    
    <changeSet dbms="postgresql" id="create directory person ea response update postgres" author="jim.stanley">
        <sql splitStatements="false" ><![CDATA[
        create or replace FUNCTION ${schema}.update_directory_person_from_view_where_early_alert_id()
            RETURNS TRIGGER as $$
            BEGIN 
            IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
            UPDATE ${schema}.mv_directory_person
            SET 
            id =                        subquery.id,
            person_id =                 subquery.person_id,
            school_id =                subquery.school_id,
            username =                  subquery.username,
            first_name =                subquery.first_name, 
            middle_name =               subquery.middle_name, 
            last_name =                 subquery.last_name, 
            birth_date =                subquery.birth_date,
            primary_email_address =     subquery.primary_email_address,
            address_line_1 =            subquery.address_line_1, 
            address_line_2 =            subquery.address_line_2, 
            city =                      subquery.city, 
            state =                     subquery.state,
            zip_code =                  subquery.zip_code,
            home_phone =                subquery.home_phone,
            work_phone =                subquery.work_phone,
            actual_start_term =         subquery.actual_start_term,
            actual_start_year =         subquery.actual_start_year,
            cell_phone =                subquery.cell_phone,
            photo_url =                 subquery.photo_url,
            residency_county =          subquery.residency_county,
            f1_status =                 subquery.f1_status,
            coach_id =                  subquery.coach_id,
            coach_first_name =          subquery.coach_first_name,
            coach_last_name =           subquery.coach_last_name,
            student_type_name =         subquery.student_type_name,
            student_intake_complete_date = subquery.student_intake_complete_date,
            program_status_name =       subquery.program_status_name,
            declared_major  =           subquery.declared_major,
            credit_hours_earned =       subquery.credit_hours_earned,
            sap_status_code =           subquery.sap_status_code,
            grade_point_average =       subquery.grade_point_average,
            active_alerts_count =       subquery.active_alerts_count,
            closed_alerts_count =       subquery.closed_alerts_count,
            early_alert_response_due_count = subquery.early_alert_response_due_count,
            early_alert_response_current_count = subquery.early_alert_response_current_count,
            current_registration_status = subquery.current_registration_status
            FROM (SELECT    vpd.id,
                vpd.person_id,
                vpd.school_id,
                vpd.username,
                vpd.first_name, 
                vpd.middle_name, 
                vpd.last_name, 
                vpd.birth_date,
                vpd.primary_email_address,
                vpd.address_line_1, 
                vpd.address_line_2, 
                vpd.city, 
                vpd.state,
                vpd.zip_code,
                vpd.home_phone,
                vpd.work_phone,
                vpd.actual_start_term,
                vpd.actual_start_year,
                vpd.cell_phone,
                vpd.photo_url,
                vpd.residency_county,
                vpd.f1_status,
                vpd.coach_id,
                vpd.coach_first_name,
                vpd.coach_last_name,
                vpd.student_type_name,
                vpd.student_intake_complete_date,
                vpd.program_status_name,
                vpd.declared_major, 
                vpd.credit_hours_earned,
                vpd.sap_status_code,
                vpd.grade_point_average,
                vpd.active_alerts_count,
                vpd.closed_alerts_count,
                vpd.early_alert_response_due_count,
                vpd.early_alert_response_current_count,
                vpd.current_registration_status
                  FROM  ${schema}.v_directory_person as vpd WHERE vpd.person_id=(select ea.person_id from early_alert ea where ea.id = NEW.early_alert_id)) AS subquery
            WHERE ${schema}.mv_directory_person.id=subquery.id;
            END IF;
            RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
            
            DROP TRIGGER IF EXISTS change_directory_person_early_alert_response on ${schema}.early_alert_response;
            
            CREATE TRIGGER change_directory_person_early_alert_response
                AFTER UPDATE OR INSERT ON ${schema}.early_alert_response
                FOR EACH ROW
            EXECUTE PROCEDURE ${schema}.update_directory_person_from_view_where_early_alert_id();
        ]]></sql>
    </changeSet>
</databaseChangeLog>