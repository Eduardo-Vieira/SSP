<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Apereo under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Apereo licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:oauth1="http://www.springframework.org/schema/security/oauth"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/security  http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/util	  http://www.springframework.org/schema/util/spring-util-3.2.xsd
		 http://www.springframework.org/schema/tx  
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/aop  
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/security/oauth2	http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/security/oauth http://www.springframework.org/schema/security/spring-security-oauth.xsd">

	<beans:import resource="uportal/security-config-uportal.xml"/>
	<beans:import resource="local/ssp-sec-local.xml"/>
	<beans:import resource="config-props.xml" />

	<!-- Little weird. Beans above depend on this thing, but no other good
	location for common security-related beans and deepening the inlines import
	hierarchy even further seems like a bad idea. -->
	<beans:bean id="runAsAuthenticationProvider"
				class="org.springframework.security.access.intercept.RunAsImplAuthenticationProvider">
		<beans:property name="key" value="#{configProperties.ssp_trusted_code_run_as_key}" />
	</beans:bean>

	<global-method-security pre-post-annotations="enabled" />

	<!-- TODO Error handling needs to be improved. Right now you end up in one of our custom error handling jsp's which
	emits JSON. That in and of itself isn't too bad, but it doesn't seem to have access to the actual exception in
	the expected scope. Should be a better way of handling this in general. Ideally we want to inject a component
	that gives us total control over any exceptions leaving this filter stack -->
	<http pattern="/api/*/lti/launch/**" create-session="stateless" entry-point-ref="ltiLaunchErrorHandler">
		<intercept-url pattern="/api/*/lti/launch/**" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<custom-filter ref="ltiProtectedResourceFilter" position="PRE_AUTH_FILTER" />
	</http>

	<http pattern="/api/*/oauth2/token" create-session="stateless" authentication-manager-ref="oauth2ClientAuthenticationManager">
		<intercept-url pattern="/api/*/oauth2/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="oauth2ClientAuthenticationEntryPoint" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>

	<http pattern="/api/1/**" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint">
		<session-management session-fixation-protection="none" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<custom-filter ref="uPortalFilter" position="PRE_AUTH_FILTER"/>
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>

	<beans:bean id="ltiProtectedResourceFilter" class="org.springframework.security.oauth.provider.filter.ProtectedResourceProcessingFilter">
		<beans:property name="allowedMethods" value="POST" />
		<beans:property name="allowAllMethods" value="false" />
		<beans:property name="tokenServices" ref="ltiTokenServices" />
		<beans:property name="consumerDetailsService" ref="ltiConsumerService" />
		<beans:property name="ignoreMissingCredentials" value="false" />
		<beans:property name="nonceServices" ref="oAuth1PersistentNonceService" />
		<beans:property name="authenticationEntryPoint" ref="ltiLaunchErrorHandler" />
	</beans:bean>

	<!-- TODO Really just want a No-Op Impl. We don't want Oauth1 token handling of any sort. -->
	<oauth1:token-services id="ltiTokenServices" />

	<!-- NEED TO ADD SOMETHING BACK FOR FORM LOGIN AND LOGOUT IN STANDALONE MODE -->

	<oauth2:resource-server id="resourceServerFilter" resource-id="ssp" token-services-ref="oauth2TokenServices" />

	<beans:bean id="oauth2PasswordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<beans:constructor-arg type="java.lang.CharSequence" value="#{configProperties.oauth2_client_password_encoding_secret}" />
	</beans:bean>

	<authentication-manager id="oauth2ClientAuthenticationManager">
		<authentication-provider user-service-ref="oauth2ClientDetailsUserService">
			<password-encoder ref="oauth2PasswordEncoder" />
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="oauth2ClientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="ssp/client" />
		<beans:property name="typeName" value="Basic" />
	</beans:bean>

	<beans:bean id="oauth2AuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="ssp/client" />
	</beans:bean>

	<beans:bean id="oauth2AccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<beans:bean name="uPortalFilter" class="org.jasig.ssp.security.uportal.UPortalPreAuthenticatedProcessingFilter">
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
	</beans:bean>

	<beans:bean name="requestCleanupServletFilter" class=" org.jasig.ssp.security.RequestCleanupServletFilter" />

	<!-- oauth2ClientDetailsService, oauth2ClientDetailsUserService and transactionalOAuth2TokenStore are defined via component scanning -->

	<!-- transactionalOAuth2TokenStore looks for oauth2PhysicalTokenStore -->
	<beans:bean id="oauth2PhysicalTokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">
		<beans:constructor-arg ref="sspDataSource" />
	</beans:bean>
	
	
	<tx:advice id="oauthTXAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" isolation="REPEATABLE_READ"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="oauthTokenServiceOperations"
                      expression="execution(* org.springframework.security.oauth2.provider.token.DefaultTokenServices.*(..))"/>
        <aop:advisor advice-ref="oauthTXAdvice" pointcut-ref="oauthTokenServiceOperations"/>
    </aop:config>

	<beans:alias name="transactionalOAuth2TokenStore" alias="oauth2TokenStore" />

	<beans:bean id="oauth2TokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="oauth2TokenStore" />
		<beans:property name="supportRefreshToken" value="false" />
		<beans:property name="clientDetailsService" ref="oauth2ClientDetailsService" />
	</beans:bean>

</beans:beans>